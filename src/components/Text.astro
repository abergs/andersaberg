---

---

<div>
    <div id="scene" style=""></div>
    <div id="canvas" style="display:none; height: 500px; width: 500px"></div>

    <script is:inline src="./leon.js"></script>
    <script is:inline src="/matter.min.js"></script>
</div>

<script>
    import { Application, Graphics, Container } from "pixi.js";

    let leon, ctx, scene, engine: Matter.Engine, app: Application;
    const circlesContainer = new Container();
    const sw = Math.min(window.innerWidth, 800) - 80;
    const sh = 250;
    let sceneObjects = [];

    let text = {
        leon: null as any,
        graphics: null as Graphics,
    };

    // module aliases
    let Engine = Matter.Engine,
        Render = Matter.Render,
        Runner = Matter.Runner,
        Bodies = Matter.Bodies,
        World = Matter.World,
        Composite = Matter.Composite;

    //settings.RESOLUTION = window.devicePixelRatio;

    function init() {
        scene = document.getElementById("scene");
        scene.width = sw;
        scene.height = sh;
        scene.style.width = sw + "px";
        scene.style.height = sh + "px";

        // Setup Pixi renderer to match the same size as the Matter world.
        app = new Application({
            backgroundAlpha: 0,
            resizeTo: scene,
            antialias: true,
        });
        scene.appendChild(app.view);

        // Matter engine
        engine = Engine.create({});

        // Leon Sans
        text = {
            leon: new LeonSans({
                text: "ANDERS Ã…BERG",
                color: ["#000000"],
                size: sw / 8.5,
                weight: 450,
                isPath: true,
                tracking: 1,
            }),
            graphics: new Graphics(),
        };
        text.leon.position(0, sh * 0.3);
        app.stage.addChild(text.graphics);

        // add the circles container
        app.stage.addChild(circlesContainer);

        // Floor
        createFloor();

        text.leon.paths.forEach((path) => {
            createTextObject({
                init: {
                    x: path.x,
                    y: path.y,
                },
                radius: 5,
                isStatic: true,
                label: "leon",
            });
        });

        // create runner
        var runner = Runner.create();
        // run the engine
        Runner.run(runner, engine);

        text.leon.drawPixi(text.graphics);

        let elapsed = 0.0;
        let elapsedMs = 0.0;
        let sinceMs = 0.0;
        app.ticker.add((delta) => {
            elapsed += delta;
            elapsedMs += app.ticker.deltaMS;
            sinceMs += app.ticker.deltaMS;

            sceneObjects.forEach((object) => {
                let x = object.body.position.x;
                let y = object.body.position.y;

                // update position
                object.sprite.position.x = x - object.init.x;
                object.sprite.position.y = y - 9;

                // every 0.5 seconds, create a new circle
                if (sinceMs > 100) {
                    sinceMs = 0;
                    if (sceneObjects.length > 90) {
                        let circle = sceneObjects.shift();

                        Matter.Composite.remove(engine.world, circle.body);
                        circlesContainer.removeChild(circle.sprite);
                        console.log(engine.world.bodies.length);
                    }

                    createSceneObject({
                        init: {
                            x: 10 + Math.floor(Math.random() * sw),
                            y: 10,
                        },
                        radius: 2 + Math.floor(Math.random() * 5),
                        label: "circle",
                    });
                }
            });

            Matter.Engine.update(engine, delta * (1000 / 60));
        });

        for (let i = 0; i < 1; i++) {
            createSceneObject({
                init: {
                    x: 90,
                    y: 10,
                },
                radius: 4,
                label: "circle",
            });
        }

        //debugRenderer();
    }

    function debugRenderer() {
        var render = Render.create({
            element: document.getElementById("canvas"),
            engine: engine,
            options: {
                width: sw,
                height: sh,
                pixelRatio: window.devicePixelRatio,
            },
        });
        Render.run(render);
    }

    function createFloor() {
        const wallBottom = Bodies.rectangle(
            scene.width / 2,
            200,
            scene.width,
            10,
            {
                isStatic: true,
            },
        );

        let g = new Graphics();
        g.beginFill(0x000000);
        g.drawRect(
            wallBottom.position.x - scene.width / 2,
            wallBottom.position.y - 3,
            scene.width,
            2,
        );
        g.endFill();
        g.zIndex = 100;

        app.stage.addChild(g);
        World.addBody(engine.world, wallBottom);
    }

    function createTextObject(obj) {
        let x = obj.init.x;
        let y = obj.init.y;
        
        const circleBody = Bodies.circle(x, y, obj.radius, {
            restitution: 0.0,
            isStatic: obj.isStatic,
            label: obj.label,
        });
        World.addBody(engine.world, circleBody);

        // debugging
        // let template = new Graphics();
        // template.lineStyle(2, 0x993333);
        // template.beginFill(0xcc3333);
        // template.drawCircle(x, y, obj.radius);
        // template.endFill();
        //app.stage.addChild(template);

        // Add the complete scene object (body and sprite) to our array of objects. We'll track those objects in the pixi frame updates (see app.ticker below).
        // sceneObjects.push({
        //     body: circleBody,
        //     sprite: template,
        // });
    }

    function createSceneObject(obj) {
        // Matter Body

        const allProps = [
            {
                color: 0xffffff,
                restitution: 0.3,
            },
            {
                color: 0x2596be,
                restitution: 0.3,
            },
            {
                color: 0xf1c95a,
                restitution: 0.3,
            },
            {
                color: 0xee0000,
                restitution: 0.9,
            },
            {
                color: 0x0000ee,
                restitution: 0.7,
            },
        ];

        const props = allProps[Math.floor(Math.random() * allProps.length)];

        const circleBody = Bodies.circle(obj.init.x, obj.init.y, obj.radius, {
            restitution: props.restitution,
            isStatic: obj.isStatic,
            label: obj.label,
        });
        World.addBody(engine.world, circleBody);

        //
        let template = new Graphics();
        template.lineStyle(1, props.color);
        template.beginFill(props.color);
        template.drawCircle(obj.init.x, obj.init.y, obj.radius);
        template.endFill();
        template.zIndex = 10;
        circlesContainer.addChild(template);

        // Add the complete scene object (body and sprite) to our array of objects. We'll track those objects in the pixi frame updates (see app.ticker below).
        sceneObjects.push({
            body: circleBody,
            sprite: template,
            init: obj.init,
        });
    }

    window.onload = () => {
        init();
    };
</script>
